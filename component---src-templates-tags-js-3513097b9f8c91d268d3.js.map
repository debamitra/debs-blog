{"version":3,"file":"component---src-templates-tags-js-3513097b9f8c91d268d3.js","mappings":"wKAmEA,UA1DaA,IAAqC,IAApC,YAAEC,EAAW,KAAEC,EAAI,SAAEC,GAAUH,EAC3C,MAAM,IAAEI,GAAQH,GACV,MAAEI,EAAK,WAAEC,GAAeJ,EAAKK,kBAC7BC,EAAeF,EAAU,SACd,IAAfA,EAAmB,GAAK,KAAG,iBACZF,EAAG,IAEpB,OACAK,EAAAA,cAACC,EAAAA,EAAM,CAACP,SAAUA,GAChBM,EAAAA,cAAA,WACEA,EAAAA,cAAA,UAAKD,GACLC,EAAAA,cAAA,MAAIE,MAAO,CAELC,UAAW,SAEdP,EAAMQ,KAAIC,IAAc,IAAb,KAAEC,GAAMD,EAClB,MAAM,KAAEE,GAASD,EAAKE,QAChB,MAAEC,GAAUH,EAAKI,YACvB,OACEV,EAAAA,cAAA,MAAIW,IAAKJ,GACPP,EAAAA,cAACY,EAAAA,KAAI,CAACC,GAAIN,GAAOE,GACd,KAQXT,EAAAA,cAACY,EAAAA,KAAI,CAACC,GAAG,SAAQ,aAEb,C","sources":["webpack://gatsby-starter-blog/./src/templates/tags.js"],"sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport Layout from \"../components/layout\"\n\n\n// Components\nimport { Link, graphql } from \"gatsby\"\n\nconst Tags = ({ pageContext, data, location }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n\n  return (\n  <Layout location={location} >\n    <div>\n      <h1>{tagHeader}</h1>\n      <ul style={{\n            \n            listStyle: \"none\",\n          }}>\n        {edges.map(({ node }) => {\n          const { slug } = node.fields\n          const { title } = node.frontmatter\n          return (\n            <li key={slug}>\n              <Link to={slug}>{title}</Link>\n            </li>\n          )\n        })}\n      </ul>\n      {/*\n              This links to a page that does not yet exist.\n              You'll come back to it!\n            */}\n      <Link to=\"/tags\">All tags</Link>\n    </div>\n\t</Layout>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`"],"names":["_ref","pageContext","data","location","tag","edges","totalCount","allMarkdownRemark","tagHeader","React","Layout","style","listStyle","map","_ref2","node","slug","fields","title","frontmatter","key","Link","to"],"sourceRoot":""}